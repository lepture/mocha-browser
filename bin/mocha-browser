#!/usr/bin/env node

var program = require('commander');
var fs = require('fs');
var path = require('path');
var exists = fs.existsSync || path.existsSync;
var cwd = process.cwd();
var cookies = [];
var headers = {};
var settings = {};

function keyValue(val, store) {
  val = val.split('=');
  if (val[1] === 'true') {
    val[1] = true;
  } else if (val[1] === 'false') {
    val[1] = false;
  }
  store[val[0]] = val[1];
  return val;
}

function cookiesParser(val) {
  val = JSON.parse(val);
  cookies.push(val);
  return val;
}

function header(val) {
  return keyValue(val, headers);
}

function setting(val) {
  return keyValue(val, settings);
}

function viewport(val) {
  val = val.split('x');
  return {
    width: parseFloat(val[0]),
    height: parseFloat(val[1])
  };
}

program
  .version(require('../package').version)
  .usage('[options] page')
  .option('-R, --reporter <name>',       'specify the reporter to use', 'spec')
  .option('-t, --timeout <timeout>',     'specify the test startup timeout to use', parseInt, 6000)
  .option('-A, --agent <userAgent>',     'specify the user agent to use')
  .option('-c, --cookies <Object>',      'phantomjs cookie object http://git.io/RmPxgA', cookiesParser)
  .option('-H, --header <name>=<value>', 'specify custom header', header)
  .option('-s, --setting <key>=<value>', 'specify specific phantom settings', setting)
  .option('-v, --view <width>x<height>', 'specify phantom viewport size', viewport)
  .option('-S, --server',                'start a http server for phantom')
  .option('-o, --output <file>',         'output json coverage to a file')
  .option('-P, --port <port>',           'specify http port for the server', parseInt, 9122)
  .option('-C, --no-color',              'disable color escape codes');

program.on('--help', function(){
  console.log('  Examples:');
  console.log('');
  console.log('    $ mocha-browser -R dot test/file.html');
  console.log('    $ mocha-browser -S test/file.html');
  console.log('');
});

program.parse(process.argv);

if (!program.args.length) {
  program.outputHelp();
  process.exit(1);
}

program.page = function() {
  var arg = program.args[0];

  if (arg.match(/file:\/\//)) {
    return arg;
  }
  if (arg.match(/http:\/\//)) {
    return arg;
  }
  if (arg.match(/https:\/\//)) {
    return arg;
  }

  // handle _site/tests/runner.html?dist
  // it would be not existed
  var filePath = arg.replace(/\?.*$/, '');

  if (exists(filePath)) {
    if (program.server) {
      return 'http://127.0.0.1:' + program.port + '/' + arg;
    }
    return arg;
  }
  if (exists(cwd + '/' + filePath)) {
    return fs.realpathSync(cwd+'/'+arg);
  }
  return arg;
}();

var mochaBrowser = require('..');
mochaBrowser(program, function(code) {
  process.exit(code);
});
